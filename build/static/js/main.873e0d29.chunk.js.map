{"version":3,"sources":["goldFrame.png","components/search.jsx","components/movieDisplay.jsx","components/nominationDisplay.jsx","components/banner.jsx","components/movieInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","handleChange","e","setState","input","target","value","returnSearch","search","key","state","this","className","Grid","container","spacing","alignItems","item","TextField","id","label","onChange","onKeyDown","Component","MovieBox","title","year","nominated","poster","movie","addNominee","displayMovieInfo","imdbID","src","onClick","find","x","Button","variant","disabled","MovieList","pageTemp","returnPage","pageChange","NaN","parseInt","Math","floor","totalResults","page","nextPage","prevPage","prevProps","Search","Response","error","movieList","i","length","push","Title","Year","Poster","fontSize","type","removeNominee","color","NominationList","apikey","BannerBox","alt","Banner","topList","MovieInfo","displayInfo","Rated","Runtime","Genre","Director","Actors","Metascore","imdbRating","Country","Language","Plot","App","nominations","JSON","parse","localStorage","getItem","visualID","isPaneOpen","getMovies","name","a","fetch","request","json","data","Error","searchMovie","alert","prevState","setItem","stringify","show","filter","val","then","response","console","log","overlayClassName","isOpen","subtitle","width","onRequestClose","React","withAlert","Boolean","window","location","hostname","match","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.873e0d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/goldFrame.aaf4a312.png\";","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./search.css\";\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            input: \"\",\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value,\r\n        });\r\n    };\r\n\r\n    returnSearch = (e, search) => {\r\n        if (e.key === \"Enter\") {\r\n            search(this.state.input, 1);\r\n        }\r\n    };\r\n    render() {\r\n        const { search } = this.props;\r\n        const { input } = this.state;\r\n\r\n        return (\r\n            <div className=\"Container\">\r\n                <div>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\">\r\n                        <Grid item>\r\n                            <SearchIcon />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <TextField\r\n                                id=\"input-with-icon-grid\"\r\n                                label=\"Movie Title\"\r\n                                input={input}\r\n                                onChange={(e) => this.handleChange(e)}\r\n                                onKeyDown={(e) => this.returnSearch(e, search)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./movieDisplay.css\";\r\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\n\r\nclass MovieBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            title,\r\n            year,\r\n            nominated,\r\n            poster,\r\n            movie,\r\n            addNominee,\r\n            displayMovieInfo,\r\n            imdbID,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"movieContainer\">\r\n                <div className=\"bannerContainer\">\r\n                    <img className=\"imageContainer\" src={poster}></img>\r\n                </div>\r\n                <div className=\"infoContainer\">\r\n                    <div\r\n                        className=\"textContainer\"\r\n                        onClick={() => displayMovieInfo(imdbID)}\r\n                    >\r\n                        Title: {title}\r\n                    </div>\r\n                    <div className=\"textContainer\">Year: {year}</div>\r\n                    {nominated.find((x) => x.imdbID === movie.imdbID) ==\r\n                    null ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            onClick={() => addNominee(movie)}\r\n                        >\r\n                            Nominate\r\n                        </Button>\r\n                    ) : (\r\n                        <Button variant=\"contained\" disabled>\r\n                            Nominated\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass MovieList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            input: \"\",\r\n            page: this.props.page,\r\n            pageTemp: this.props.page,\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            pageTemp: e,\r\n        });\r\n    };\r\n\r\n    returnPage = (e, pageChange) => {\r\n        if (e === \"Enter\") {\r\n            if (\r\n                parseInt(this.state.pageTemp) !== NaN &&\r\n                this.state.pageTemp <=\r\n                    Math.floor(this.props.totalResults / 10) + 1 &&\r\n                this.state.pageTemp > 0\r\n            ) {\r\n                this.setState({\r\n                    page: this.state.pageTemp,\r\n                });\r\n                pageChange(this.state.pageTemp);\r\n            } else {\r\n                this.setState({\r\n                    pageTemp: this.state.page,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    nextPage = (pageChange) => {\r\n        this.setState(\r\n            {\r\n                pageTemp: parseInt(this.state.page) + 1,\r\n            },\r\n            () => {\r\n                this.returnPage(\"Enter\", pageChange);\r\n            }\r\n        );\r\n    };\r\n\r\n    prevPage = (pageChange) => {\r\n        this.setState(\r\n            {\r\n                pageTemp: parseInt(this.state.page) - 1,\r\n            },\r\n            () => {\r\n                this.returnPage(\"Enter\", pageChange);\r\n            }\r\n        );\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                page: this.props.page,\r\n                pageTemp: this.state.page,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            Search,\r\n            Response,\r\n            nominated,\r\n            input,\r\n            totalResults,\r\n            addNominee,\r\n            error,\r\n            pageChange,\r\n            displayMovieInfo,\r\n        } = this.props;\r\n        const movieList = [];\r\n\r\n        if (Response === \"True\") {\r\n            for (let i = 0; i < Search.length; i++) {\r\n                let movie = Search[i];\r\n                movieList.push(\r\n                    <MovieBox\r\n                        key={i}\r\n                        title={movie.Title}\r\n                        year={movie.Year}\r\n                        nominated={nominated}\r\n                        poster={movie.Poster}\r\n                        movie={Search[i]}\r\n                        addNominee={addNominee}\r\n                        imdbID={movie.imdbID}\r\n                        displayMovieInfo={displayMovieInfo}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"SectionContainer\">\r\n                <div className=\"resultsTitle\">\r\n                    {Response === \"False\" ? (\r\n                        error === \"Too many results.\" ? (\r\n                            <div>\r\n                                {\" \"}\r\n                                Too many results, narrow down your search{\" \"}\r\n                            </div>\r\n                        ) : (\r\n                            <div> No results found for \"{input}\" </div>\r\n                        )\r\n                    ) : (\r\n                        <div>\r\n                            {\" \"}\r\n                            {totalResults} Total Results For \"{input}\"{\" \"}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"MovieListContainer\">{movieList}</div>\r\n                {totalResults > 10 ? (\r\n                    <div className=\"pageChangeContainer\">\r\n                        <ArrowLeftIcon\r\n                            id=\"pageArrow\"\r\n                            fontSize=\"large\"\r\n                            onClick={() => this.prevPage(pageChange)}\r\n                        />\r\n                        <input\r\n                            className=\"pageChange\"\r\n                            type=\"text\"\r\n                            value={this.state.pageTemp}\r\n                            onChange={(e) => this.handleChange(e.target.value)}\r\n                            onKeyDown={(e) =>\r\n                                this.returnPage(e.key, pageChange)\r\n                            }\r\n                        />\r\n                        <div className=\"totalPages\">\r\n                            {\" \"}\r\n                            /{Math.floor(this.props.totalResults / 10) + 1}{\" \"}\r\n                        </div>\r\n                        <ArrowRightIcon\r\n                            id=\"pageArrow\"\r\n                            fontSize=\"large\"\r\n                            onClick={() => this.nextPage(pageChange)}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <div />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieList;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./nominationDisplay.css\";\r\n\r\nclass MovieBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { title, year, poster, id, removeNominee } = this.props;\r\n\r\n        return (\r\n            <div className=\"movieNominationContainer\">\r\n                <div className=\"bannerContainer\">\r\n                    <img className=\"imageContainer\" src={poster}></img>\r\n                </div>\r\n                <div className=\"infoContainer\">\r\n                    <div className=\"textNominationContainer\">\r\n                        Title: {title}\r\n                    </div>\r\n                    <div className=\"textNominationContainer\">Year: {year}</div>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => removeNominee(id)}\r\n                    >\r\n                        Remove\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass NominationList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            input: \"\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { nominated, removeNominee, apikey } = this.props;\r\n        let movieList = [];\r\n\r\n        for (let i = 0; i < nominated.length; i++) {\r\n            const movie = nominated[i];\r\n            if (movie != null) {\r\n                movieList.push(\r\n                    <MovieBox\r\n                        key={i}\r\n                        title={movie.Title}\r\n                        year={movie.Year}\r\n                        poster={movie.Poster}\r\n                        removeNominee={removeNominee}\r\n                        id={nominated[i]}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"SectionNominationContainer\">\r\n                <div className=\"MovieListNominationContainer\">{movieList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NominationList;\r\n","import React, { Component } from \"react\";\r\nimport \"./banner.css\";\r\nimport frame from \"../goldFrame.png\";\r\n\r\nclass BannerBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { poster } = this.props;\r\n        return (\r\n            <div className=\"bannerFrameContainer\">\r\n                <div className=\"goldFrame\" alt=\"cannot display\">\r\n                    <div>\r\n                        <img src={poster} className=\"posterFrame\"></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Banner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            input: \"\",\r\n        };\r\n    }\r\n    render() {\r\n        const { nominated } = this.props;\r\n        const topList = [];\r\n\r\n        if (nominated.length === 5) {\r\n            for (let i = 0; i < nominated.length; i++) {\r\n                let poster = nominated[i].Poster;\r\n                topList.push(<BannerBox key={i} poster={poster} />);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"bannerSectionContainer\">\r\n                <h4 id=\"topPicksHeader\">YOUR TOP PICKS</h4>\r\n                <div className=\"topList\">{topList}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./movieInfo.css\";\r\n\r\nclass MovieInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            displayInfo: this.props.displayInfo,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { displayInfo } = this.props;\r\n\r\n        return (\r\n            <div className=\"movieDisplayContainer\">\r\n                <div className=\"bannerInfoContainer\">\r\n                    <img\r\n                        className=\"imageInfoContainer\"\r\n                        src={displayInfo.Poster}\r\n                    ></img>\r\n                    <div className=\"MovieInfoContainer\">\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Title: </b>\r\n                            {displayInfo.Title}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Year: </b>\r\n                            {displayInfo.Year}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Rated: </b>\r\n                            {displayInfo.Rated}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Runtime: </b>\r\n                            {displayInfo.Runtime}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Genre: </b>\r\n                            {displayInfo.Genre}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Director: </b>\r\n                            {displayInfo.Director}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Actors: </b>\r\n                            {displayInfo.Actors}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Metascore: </b>\r\n                            {displayInfo.Metascore}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>imdbRating: </b>\r\n                            {displayInfo.imdbRating}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Country: </b>\r\n                            {displayInfo.Country}\r\n                        </div>\r\n                        <div className=\"textInfoContainer\">\r\n                            <b>Language: </b>\r\n                            {displayInfo.Language}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"synopsisContainer\">\r\n                    <div className=\"textInfoContainer\">\r\n                        <b>Plot:</b>\r\n                    </div>\r\n                    <div className=\"textInfoContainer\">{displayInfo.Plot}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieInfo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/search\";\nimport MovieList from \"./components/movieDisplay\";\nimport NominationList from \"./components/nominationDisplay\";\nimport Banner from \"./components/banner\";\nimport MovieInfo from \"./components/movieInfo\";\nimport { withAlert } from \"react-alert\";\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        input: null,\n        apikey: \"88d64122\",\n        nominations: JSON.parse(localStorage.getItem(\"nominations\")) || [],\n        Response: \"False\",\n        Search: null,\n        visualID: null,\n        error: null,\n        totalResults: 0,\n        isPaneOpen: false,\n        page: 1,\n        displayInfo: null,\n    };\n\n    getMovies = async (name, page) => {\n        const request = await fetch(\n            \"http://www.omdbapi.com/?s=\" +\n                name +\n                \"&type=movie&apikey=\" +\n                this.state.apikey +\n                \"&page=\" +\n                page\n        );\n        const data = await request.json();\n        if (data.Response === \"True\") {\n            this.setState({\n                input: name,\n                Response: data.Response,\n                Search: data.Search,\n                error: null,\n                totalResults: data.totalResults,\n            });\n        } else {\n            this.setState({\n                input: name,\n                Response: data.Response,\n                Search: null,\n                error: data.Error,\n                totalResults: 0,\n            });\n        }\n    };\n\n    searchMovie = (name, page) => {\n        this.setState({\n            input: name,\n            page: 1,\n        });\n        this.getMovies(name, page);\n    };\n\n    addNominee = (movie) => {\n        const alert = this.props.alert;\n        if (this.state.nominations.length < 5) {\n            this.setState(\n                (prevState) => ({\n                    nominations: [...prevState.nominations, movie],\n                }),\n                () => {\n                    localStorage.setItem(\n                        \"nominations\",\n                        JSON.stringify(this.state.nominations)\n                    );\n                }\n            );\n        } else {\n            alert.show(\"5 Nominations already made, Remove one to add\");\n        }\n    };\n\n    removeNominee = (id) => {\n        this.setState({\n            nominations: this.state.nominations.filter(function (target) {\n                return target !== id;\n            }),\n        });\n    };\n\n    pageChange = (val) => {\n        this.setState({\n            page: val,\n        });\n        this.getMovies(this.state.input, val);\n    };\n\n    displayMovieInfo = (imdbID) => {\n        this.setState({\n            displayInfo: imdbID,\n        });\n        fetch(\n            \"http://www.omdbapi.com/?i=\" +\n                imdbID +\n                \"&apikey=\" +\n                this.state.apikey +\n                \"&plot=full\"\n        )\n            .then((response) => response.json())\n            .then((data) =>\n                this.setState({ displayInfo: data }, () =>\n                    console.log(this.state.displayInfo)\n                )\n            );\n    };\n\n    render() {\n        const {\n            input,\n            Response,\n            error,\n            Search,\n            nominations,\n            totalResults,\n            apikey,\n            page,\n            displayInfo,\n        } = this.state;\n\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <h1 id=\"Title\">The Shoppies</h1>\n                    <div className=\"functionContainer\">\n                        <SearchBar search={this.searchMovie} />\n                    </div>\n                    <div className=\"functionContainer\">\n                        <MovieList\n                            Search={Search}\n                            Response={Response}\n                            nominated={nominations}\n                            input={input}\n                            error={error}\n                            totalResults={totalResults}\n                            addNominee={this.addNominee}\n                            error={error}\n                            page={page}\n                            pageTemp={page}\n                            pageChange={this.pageChange}\n                            displayMovieInfo={this.displayMovieInfo}\n                        />\n                        {displayInfo !== null ? (\n                            <MovieInfo displayInfo={displayInfo} />\n                        ) : (\n                            <div></div>\n                        )}\n                    </div>\n                </div>\n                <div\n                    className=\"rightPanel\"\n                    onClick={() => this.setState({ isPaneOpen: true })}\n                >\n                    Open to view nominations\n                </div>\n                <SlidingPane\n                    className=\"some-custom-class\"\n                    overlayClassName=\"some-custom-overlay-class\"\n                    isOpen={this.state.isPaneOpen}\n                    title=\"Nomination List\"\n                    subtitle=\"Your top 5 picks\"\n                    width=\"800px\"\n                    onRequestClose={() => {\n                        // triggered on \"<\" on left top click or on outside click\n                        this.setState({ isPaneOpen: false });\n                    }}\n                >\n                    <NominationList\n                        nominated={nominations}\n                        removeNominee={this.removeNominee}\n                        apikey={apikey}\n                    />\n                    {nominations.length === 5 ? (\n                        <Banner nominated={nominations} />\n                    ) : (\n                        <div />\n                    )}\n                </SlidingPane>\n            </div>\n        );\n    }\n}\n\nexport default withAlert()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\nconst options = {\n    position: positions.BOTTOM_CENTER,\n    timeout: 2000,\n    offset: \"10px\",\n    transition: transitions.SCALE,\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App />\n        </AlertProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}